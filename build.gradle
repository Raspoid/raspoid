plugins {
	id 'java'
	id 'eclipse'
	id 'org.hidetake.ssh' version '1.2.0'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
	id 'org.sonarqube' version '3.3'
	id 'jacoco'
}

version = 1.0
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

sourceSets {
    main {
        java {
            srcDirs = ["src/main"]
        }
    }
    test {
        java {
            srcDirs = ["src/test"]
        }
    }
}

repositories {
	// Local libs to load
	flatDir {
           dirs 'libs'
    }
    // General repositories
	jcenter()
}

dependencies {
	// JUnit
	testImplementation 'junit:junit:4.12'
	
	// pi4j
    implementation name: 'pi4j-core-1.0.1-SNAPSHOT'
    
    // websockets
	implementation name: 'tyrus-server-1.12'
	implementation name: 'tyrus-container-grizzly-server-1.12'
	implementation name: 'tyrus-standalone-client-1.12'
    
    // http requests
	implementation name: 'gson-2.6.2'
	implementation name: 'httpcore-4.4.4'
	implementation name: 'httpclient-4.5.2'
	implementation name: 'commons-logging-1.2'
    
    // pid
	implementation name: 'pid-0.0.1-SNAPSHOT'
    
    // OpenCV
	implementation name: 'opencv-2413'
}

/****************************************
* Remote deployement on the raspberry pi
****************************************/
ssh.settings {
	// Avoid checking known_hosts file
  	knownHosts = allowAnyHosts
}

/**
 * Remote raspberry pi configuration
 */
remotes {
  raspberry {
  	// Set these vars in ~/.gradle/gradle.properties
  	host = piHostname
  	user = piUsername
  	if (useKey == 'true') {
  		identity = file("${System.getProperty('user.home')}" + keyPath)
  		agent = true
  	} else {
  		password = piPassword
  	}
    retryCount = 2
  }
}

/**
 * Jar deployement tasks on the remote raspberry pi.
 * All the dependencies are self contained in the jar
 */
task deployToPi(dependsOn: shadowJar) {
	doLast {
		ssh.run {
			session(remotes.raspberry) {
				put from: "$projectDir/build/libs/raspoid-1.0-all.jar", into: 'raspoid-1.0-all.jar'
			}
		}
	}
}
configure(deployToPi) {
	group = 'Raspoid'
	description = 'Build and update the jar on the raspberry pi'
}

/**
 * Deploy and launch the jar in debug mode.
 * You need to provide the argument PentryPoint='my.fully.qualified.MainClass'
 * to specify the entry point. The JVM socket is listening on the port 8000
 */
task debugOnPi(dependsOn: deployToPi) {
	doLast {
		if (project.hasProperty('entryPoint')) {
			ssh.run {
				session(remotes.raspberry) {
					execute 'sudo java -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y -cp raspoid-1.0-all.jar ' + project.property('entryPoint')
				}
			}
		} else {
			println "A fully qualified class name implementing the main entry point is required"
		}
	}
}
configure(debugOnPi) {
	group = 'Raspoid'
	description = 'Launch raspoid in debug mode on the raspberry pi'
}

sonarqube {
    properties {
        property "sonar.projectName", "raspoid"
        property "sonar.projectKey", "raspoid:raspoid"
    }
}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$projectDir/jacocoReport")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}
